{"id":"1253616","content":"package com.redhat.coolstore.service;\r\n\r\nimport com.redhat.coolstore.model.Order;\r\nimport com.redhat.coolstore.utils.Transformers;\r\nimport java.util.Hashtable;\r\nimport java.util.function.Consumer;\r\nimport java.util.logging.Logger;\r\nimport javax.inject.Inject;\r\nimport javax.jms.JMSException;\r\nimport javax.jms.Message;\r\nimport javax.jms.MessageListener;\r\nimport javax.jms.TextMessage;\r\nimport javax.jms.Topic;\r\nimport javax.jms.TopicConnection;\r\nimport javax.jms.TopicConnectionFactory;\r\nimport javax.jms.TopicSession;\r\nimport javax.jms.TopicSubscriber;\r\nimport javax.naming.Context;\r\nimport javax.naming.InitialContext;\r\nimport javax.naming.NamingException;\r\nimport javax.rmi.PortableRemoteObject;\r\n\r\npublic class InventoryNotificationMDB implements MessageListener {\r\n   private static final int LOW_THRESHOLD = 50;\r\n   @Inject\r\n   private CatalogService catalogService;\r\n   @Inject\r\n   private Logger log;\r\n   private static final String JNDI_FACTORY = \"weblogic.jndi.WLInitialContextFactory\";\r\n   private static final String JMS_FACTORY = \"TCF\";\r\n   private static final String TOPIC = \"topic/orders\";\r\n   private TopicConnection tcon;\r\n   private TopicSession tsession;\r\n   private TopicSubscriber tsubscriber;\r\n\r\n   public void onMessage(Message rcvMessage) {\r\n      try {\r\n         if (rcvMessage instanceof TextMessage) {\r\n            TextMessage msg = (TextMessage)rcvMessage;\r\n            String orderStr = (String)msg.getBody(String.class);\r\n            Order order = Transformers.jsonToOrder(orderStr);\r\n            order.getItemList().forEach((orderItem) -> {\r\n               int old_quantity = this.catalogService.getCatalogItemById(orderItem.getProductId()).getInventory().getQuantity();\r\n               int new_quantity = old_quantity - orderItem.getQuantity();\r\n               if (new_quantity < 50) {\r\n                  this.log.warning(\"Inventory for item \" + orderItem.getProductId() + \" is below threshold (\" + 50 + \"), contact supplier!\");\r\n               } else {\r\n                  orderItem.setQuantity(new_quantity);\r\n               }\r\n\r\n            });\r\n         }\r\n      } catch (JMSException var5) {\r\n         System.err.println(\"An exception occurred: \" + var5.getMessage());\r\n      }\r\n\r\n   }\r\n\r\n   public void init() throws NamingException, JMSException {\r\n      Context ctx = getInitialContext();\r\n      TopicConnectionFactory tconFactory = (TopicConnectionFactory)PortableRemoteObject.narrow(ctx.lookup(\"TCF\"), TopicConnectionFactory.class);\r\n      this.tcon = tconFactory.createTopicConnection();\r\n      this.tsession = this.tcon.createTopicSession(false, 1);\r\n      Topic topic = (Topic)PortableRemoteObject.narrow(ctx.lookup(\"topic/orders\"), Topic.class);\r\n      this.tsubscriber = this.tsession.createSubscriber(topic);\r\n      this.tsubscriber.setMessageListener(this);\r\n      this.tcon.start();\r\n   }\r\n\r\n   public void close() throws JMSException {\r\n      this.tsubscriber.close();\r\n      this.tsession.close();\r\n      this.tcon.close();\r\n   }\r\n\r\n   private static InitialContext getInitialContext() throws NamingException {\r\n      Hashtable<String, String> env = new Hashtable();\r\n      env.put(\"java.naming.factory.initial\", \"weblogic.jndi.WLInitialContextFactory\");\r\n      env.put(\"java.naming.provider.url\", \"t3://localhost:7001\");\r\n      env.put(\"weblogic.jndi.createIntermediateContexts\", \"true\");\r\n      return new InitialContext(env);\r\n   }\r\n}\r\n"}