{"id":"1249320","content":"package com.redhat.coolstore.rest;\r\n\r\nimport com.redhat.coolstore.model.Product;\r\nimport com.redhat.coolstore.model.ShoppingCart;\r\nimport com.redhat.coolstore.model.ShoppingCartItem;\r\nimport com.redhat.coolstore.service.ShoppingCartService;\r\nimport java.io.Serializable;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.function.Consumer;\r\nimport java.util.function.Predicate;\r\nimport javax.enterprise.context.SessionScoped;\r\nimport javax.inject.Inject;\r\nimport javax.jms.JMSDestinationDefinition;\r\nimport javax.jms.JMSDestinationDefinitions;\r\nimport javax.ws.rs.DELETE;\r\nimport javax.ws.rs.GET;\r\nimport javax.ws.rs.POST;\r\nimport javax.ws.rs.Path;\r\nimport javax.ws.rs.PathParam;\r\nimport javax.ws.rs.Produces;\r\n\r\n@SessionScoped\r\n@Path(\"/cart\")\r\n@JMSDestinationDefinitions({@JMSDestinationDefinition(\r\n   name = \"java:/jms/queue/orders\",\r\n   interfaceName = \"javax.jms.Queue\",\r\n   destinationName = \"ordersQueue\"\r\n)})\r\npublic class CartEndpoint implements Serializable {\r\n   private static final long serialVersionUID = -7227732980791688773L;\r\n   @Inject\r\n   private ShoppingCartService shoppingCartService;\r\n\r\n   @GET\r\n   @Path(\"/{cartId}\")\r\n   @Produces({\"application/json\"})\r\n   public ShoppingCart getCart(@PathParam(\"cartId\") String cartId) {\r\n      return this.shoppingCartService.getShoppingCart(cartId);\r\n   }\r\n\r\n   @POST\r\n   @Path(\"/checkout/{cartId}\")\r\n   @Produces({\"application/json\"})\r\n   public ShoppingCart checkout(@PathParam(\"cartId\") String cartId) {\r\n      return this.shoppingCartService.checkOutShoppingCart(cartId);\r\n   }\r\n\r\n   @POST\r\n   @Path(\"/{cartId}/{itemId}/{quantity}\")\r\n   @Produces({\"application/json\"})\r\n   public ShoppingCart add(@PathParam(\"cartId\") String cartId, @PathParam(\"itemId\") String itemId, @PathParam(\"quantity\") int quantity) throws Exception {\r\n      ShoppingCart cart = this.shoppingCartService.getShoppingCart(cartId);\r\n      Product product = this.shoppingCartService.getProduct(itemId);\r\n      ShoppingCartItem sci = new ShoppingCartItem();\r\n      sci.setProduct(product);\r\n      sci.setQuantity(quantity);\r\n      sci.setPrice(product.getPrice());\r\n      cart.addShoppingCartItem(sci);\r\n\r\n      try {\r\n         this.shoppingCartService.priceShoppingCart(cart);\r\n         cart.setShoppingCartItemList(this.dedupeCartItems(cart.getShoppingCartItemList()));\r\n         return cart;\r\n      } catch (Exception var8) {\r\n         cart.removeShoppingCartItem(sci);\r\n         throw var8;\r\n      }\r\n   }\r\n\r\n   @POST\r\n   @Path(\"/{cartId}/{tmpId}\")\r\n   @Produces({\"application/json\"})\r\n   public ShoppingCart set(@PathParam(\"cartId\") String cartId, @PathParam(\"tmpId\") String tmpId) throws Exception {\r\n      ShoppingCart cart = this.shoppingCartService.getShoppingCart(cartId);\r\n      ShoppingCart tmpCart = this.shoppingCartService.getShoppingCart(tmpId);\r\n      if (tmpCart != null) {\r\n         cart.resetShoppingCartItemList();\r\n         cart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());\r\n      }\r\n\r\n      try {\r\n         this.shoppingCartService.priceShoppingCart(cart);\r\n         cart.setShoppingCartItemList(this.dedupeCartItems(cart.getShoppingCartItemList()));\r\n         return cart;\r\n      } catch (Exception var6) {\r\n         throw var6;\r\n      }\r\n   }\r\n\r\n   @DELETE\r\n   @Path(\"/{cartId}/{itemId}/{quantity}\")\r\n   @Produces({\"application/json\"})\r\n   public ShoppingCart delete(@PathParam(\"cartId\") String cartId, @PathParam(\"itemId\") String itemId, @PathParam(\"quantity\") int quantity) throws Exception {\r\n      List<ShoppingCartItem> toRemoveList = new ArrayList();\r\n      ShoppingCart cart = this.shoppingCartService.getShoppingCart(cartId);\r\n      cart.getShoppingCartItemList().stream().filter((sci) -> {\r\n         return sci.getProduct().getItemId().equals(itemId);\r\n      }).forEach((sci) -> {\r\n         if (quantity >= sci.getQuantity()) {\r\n            toRemoveList.add(sci);\r\n         } else {\r\n            sci.setQuantity(sci.getQuantity() - quantity);\r\n         }\r\n\r\n      });\r\n      Objects.requireNonNull(cart);\r\n      toRemoveList.forEach(cart::removeShoppingCartItem);\r\n      this.shoppingCartService.priceShoppingCart(cart);\r\n      return cart;\r\n   }\r\n\r\n   private List<ShoppingCartItem> dedupeCartItems(List<ShoppingCartItem> cartItems) {\r\n      List<ShoppingCartItem> result = new ArrayList();\r\n      Map<String, Integer> quantityMap = new HashMap();\r\n      Iterator var4 = cartItems.iterator();\r\n\r\n      while(var4.hasNext()) {\r\n         ShoppingCartItem sci = (ShoppingCartItem)var4.next();\r\n         if (quantityMap.containsKey(sci.getProduct().getItemId())) {\r\n            quantityMap.put(sci.getProduct().getItemId(), ((Integer)quantityMap.get(sci.getProduct().getItemId())).intValue() + sci.getQuantity());\r\n         } else {\r\n            quantityMap.put(sci.getProduct().getItemId(), sci.getQuantity());\r\n         }\r\n      }\r\n\r\n      var4 = quantityMap.keySet().iterator();\r\n\r\n      while(var4.hasNext()) {\r\n         String itemId = (String)var4.next();\r\n         Product p = this.shoppingCartService.getProduct(itemId);\r\n         ShoppingCartItem newItem = new ShoppingCartItem();\r\n         newItem.setQuantity(((Integer)quantityMap.get(itemId)).intValue());\r\n         newItem.setPrice(p.getPrice());\r\n         newItem.setProduct(p);\r\n         result.add(newItem);\r\n      }\r\n\r\n      return result;\r\n   }\r\n}\r\n"}