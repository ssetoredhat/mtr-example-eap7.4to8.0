{"id":"hibernate6-00090","content":"<rule xmlns=\"http://windup.jboss.org/schema/jboss-ruleset\" id=\"hibernate6-00090\">\r\n            <when>\r\n                <or>\r\n                    <javaclass references=\"jakarta.persistence.Query.getResultStream({*})\">\r\n                        <location>METHOD_CALL</location>\r\n                    </javaclass>\r\n                    <javaclass references=\"org.hibernate.query.Query.stream({*})\">\r\n                        <location>METHOD_CALL</location>\r\n                    </javaclass>\r\n                </or>\r\n            </when>\r\n            <perform>\r\n                <hint category-id=\"mandatory\" effort=\"1\" title=\"Stream#close() must be called explicitly to close the underlying resources\">\r\n                    <message>\r\n                        `jakarta.persistence.Query#getResultStream()` and `org.hibernate.query.Query#stream()` no longer return a Stream decorator. In order to close the underlying IO resources, it is now necessary to explicitly call the `Stream#close()` method.\r\n                        This change makes the Streams returned by Hibernate behave as defined in the JDK Stream documentation, which is quite explicit about the need for an explicit call to close by the user to avoid resource leakages.\r\n                    </message>\r\n                    <link href=\"https://github.com/hibernate/hibernate-orm/blob/6.0/migration-guide.adoc#stream\" title=\"Hibernate ORM 6 migration guide - Stream\"/>\r\n                </hint>\r\n            </perform>\r\n        </rule>"}