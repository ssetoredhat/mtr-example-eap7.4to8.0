{"id":"1273992","content":"package com.redhat.coolstore.utils;\r\n\r\nimport com.redhat.coolstore.model.CatalogItemEntity;\r\nimport com.redhat.coolstore.model.Order;\r\nimport com.redhat.coolstore.model.OrderItem;\r\nimport com.redhat.coolstore.model.Product;\r\nimport com.redhat.coolstore.model.ProductImpl;\r\nimport com.redhat.coolstore.model.ShoppingCart;\r\nimport java.io.StringReader;\r\nimport java.io.StringWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\nimport java.util.function.Consumer;\r\nimport java.util.function.ToDoubleFunction;\r\nimport java.util.logging.Logger;\r\nimport javax.json.Json;\r\nimport javax.json.JsonArray;\r\nimport javax.json.JsonArrayBuilder;\r\nimport javax.json.JsonObject;\r\nimport javax.json.JsonReader;\r\nimport javax.json.JsonWriter;\r\n\r\npublic class Transformers {\r\n   private static final String[] RANDOM_NAMES = new String[]{\"Sven Karlsson\", \"Johan Andersson\", \"Karl Svensson\", \"Anders Johansson\", \"Stefan Olson\", \"Martin Ericsson\"};\r\n   private static final String[] RANDOM_EMAILS = new String[]{\"sven@gmail.com\", \"johan@gmail.com\", \"karl@gmail.com\", \"anders@gmail.com\", \"stefan@gmail.com\", \"martin@gmail.com\"};\r\n   private static Logger log = Logger.getLogger(Transformers.class.getName());\r\n\r\n   public static Product toProduct(CatalogItemEntity entity) {\r\n      ProductImpl prod = new ProductImpl();\r\n      prod.setItemId(entity.getItemId());\r\n      prod.setName(entity.getName());\r\n      prod.setDesc(entity.getDesc());\r\n      prod.setPrice(entity.getPrice());\r\n      if (entity.getInventory() != null) {\r\n         prod.setLocation(entity.getInventory().getLocation());\r\n         prod.setLink(entity.getInventory().getLink());\r\n         prod.setQuantity(entity.getInventory().getQuantity());\r\n      } else {\r\n         log.warning(\"Inventory for \" + entity.getName() + \"[\" + entity.getItemId() + \"] unknown and missing\");\r\n      }\r\n\r\n      return prod;\r\n   }\r\n\r\n   public static String shoppingCartToJson(ShoppingCart cart) {\r\n      JsonArrayBuilder cartItems = Json.createArrayBuilder();\r\n      cart.getShoppingCartItemList().forEach((item) -> {\r\n         cartItems.add(Json.createObjectBuilder().add(\"productSku\", item.getProduct().getItemId()).add(\"quantity\", item.getQuantity()));\r\n      });\r\n      int randomNameAndEmailIndex = ThreadLocalRandom.current().nextInt(RANDOM_NAMES.length);\r\n      JsonObject jsonObject = Json.createObjectBuilder().add(\"orderValue\", cart.getCartTotal().doubleValue()).add(\"customerName\", RANDOM_NAMES[randomNameAndEmailIndex]).add(\"customerEmail\", RANDOM_EMAILS[randomNameAndEmailIndex]).add(\"retailPrice\", cart.getShoppingCartItemList().stream().mapToDouble((i) -> {\r\n         return (double)i.getQuantity() * i.getPrice();\r\n      }).sum()).add(\"discount\", cart.getCartItemPromoSavings().doubleValue()).add(\"shippingFee\", cart.getShippingTotal().doubleValue()).add(\"shippingDiscount\", cart.getShippingPromoSavings().doubleValue()).add(\"items\", cartItems).build();\r\n      StringWriter w = new StringWriter();\r\n      JsonWriter writer = Json.createWriter(w);\r\n\r\n      try {\r\n         writer.write(jsonObject);\r\n      } catch (Throwable var9) {\r\n         if (writer != null) {\r\n            try {\r\n               writer.close();\r\n            } catch (Throwable var8) {\r\n               var9.addSuppressed(var8);\r\n            }\r\n         }\r\n\r\n         throw var9;\r\n      }\r\n\r\n      if (writer != null) {\r\n         writer.close();\r\n      }\r\n\r\n      return w.toString();\r\n   }\r\n\r\n   public static Order jsonToOrder(String json) {\r\n      JsonReader jsonReader = Json.createReader(new StringReader(json));\r\n      JsonObject rootObject = jsonReader.readObject();\r\n      Order order = new Order();\r\n      order.setCustomerName(rootObject.getString(\"customerName\"));\r\n      order.setCustomerEmail(rootObject.getString(\"customerEmail\"));\r\n      order.setOrderValue(rootObject.getJsonNumber(\"orderValue\").doubleValue());\r\n      order.setRetailPrice(rootObject.getJsonNumber(\"retailPrice\").doubleValue());\r\n      order.setDiscount(rootObject.getJsonNumber(\"discount\").doubleValue());\r\n      order.setShippingFee(rootObject.getJsonNumber(\"shippingFee\").doubleValue());\r\n      order.setShippingDiscount(rootObject.getJsonNumber(\"shippingDiscount\").doubleValue());\r\n      JsonArray jsonItems = rootObject.getJsonArray(\"items\");\r\n      List<OrderItem> items = new ArrayList(jsonItems.size());\r\n      Iterator var6 = jsonItems.getValuesAs(JsonObject.class).iterator();\r\n\r\n      while(var6.hasNext()) {\r\n         JsonObject jsonItem = (JsonObject)var6.next();\r\n         OrderItem oi = new OrderItem();\r\n         oi.setProductId(jsonItem.getString(\"productSku\"));\r\n         oi.setQuantity(jsonItem.getInt(\"quantity\"));\r\n         items.add(oi);\r\n      }\r\n\r\n      order.setItemList(items);\r\n      return order;\r\n   }\r\n}\r\n"}