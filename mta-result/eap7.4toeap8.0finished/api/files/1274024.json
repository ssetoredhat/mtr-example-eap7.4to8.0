{"id":"1274024","content":"package com.redhat.coolstore.service;\r\n\r\nimport com.redhat.coolstore.model.Product;\r\nimport com.redhat.coolstore.model.ShoppingCart;\r\nimport com.redhat.coolstore.model.ShoppingCartItem;\r\nimport com.redhat.coolstore.utils.Transformers;\r\nimport jakarta.annotation.Resource;\r\nimport jakarta.ejb.Stateful;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.jms.JMSContext;\r\nimport jakarta.jms.Topic;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.logging.Logger;\r\n\r\n@Stateful\r\npublic class ShoppingCartService {\r\n   @Inject\r\n   Logger log;\r\n   @Inject\r\n   ProductService productServices;\r\n   @Inject\r\n   ShippingService ss;\r\n   @Inject\r\n   PromoService ps;\r\n   @Inject\r\n   private transient JMSContext context;\r\n   @Resource(\r\n      lookup = \"java:/topic/orders\"\r\n   )\r\n   private Topic ordersTopic;\r\n   private Map<String, ShoppingCart> carts = new HashMap();\r\n\r\n   public ShoppingCart getShoppingCart(String cartId) {\r\n      if (!this.carts.containsKey(cartId)) {\r\n         ShoppingCart c = new ShoppingCart();\r\n         this.carts.put(cartId, c);\r\n         return c;\r\n      } else {\r\n         return (ShoppingCart)this.carts.get(cartId);\r\n      }\r\n   }\r\n\r\n   public ShoppingCart checkOutShoppingCart(String cartId) {\r\n      ShoppingCart cart = this.getShoppingCart(cartId);\r\n      this.context.createProducer().send(this.ordersTopic, Transformers.shoppingCartToJson(cart));\r\n      cart.resetShoppingCartItemList();\r\n      this.priceShoppingCart(cart);\r\n      return cart;\r\n   }\r\n\r\n   public void priceShoppingCart(ShoppingCart sc) {\r\n      if (sc != null) {\r\n         this.initShoppingCartForPricing(sc);\r\n         if (sc.getShoppingCartItemList() != null && sc.getShoppingCartItemList().size() > 0) {\r\n            this.ps.applyCartItemPromotions(sc);\r\n            Iterator var2 = sc.getShoppingCartItemList().iterator();\r\n\r\n            while(var2.hasNext()) {\r\n               ShoppingCartItem sci = (ShoppingCartItem)var2.next();\r\n               sc.setCartItemPromoSavings(sc.getCartItemPromoSavings() + sci.getPromoSavings() * (double)sci.getQuantity());\r\n               sc.setCartItemTotal(sc.getCartItemTotal() + sci.getPrice() * (double)sci.getQuantity());\r\n            }\r\n\r\n            this.ss.calculateShipping(sc);\r\n         }\r\n\r\n         this.ps.applyShippingPromotions(sc);\r\n         sc.setCartTotal(sc.getCartItemTotal() + sc.getShippingTotal());\r\n      }\r\n\r\n   }\r\n\r\n   private void initShoppingCartForPricing(ShoppingCart sc) {\r\n      sc.setCartItemTotal(0.0D);\r\n      sc.setCartItemPromoSavings(0.0D);\r\n      sc.setShippingTotal(0.0D);\r\n      sc.setShippingPromoSavings(0.0D);\r\n      sc.setCartTotal(0.0D);\r\n\r\n      ShoppingCartItem sci;\r\n      for(Iterator var2 = sc.getShoppingCartItemList().iterator(); var2.hasNext(); sci.setPromoSavings(0.0D)) {\r\n         sci = (ShoppingCartItem)var2.next();\r\n         Product p = this.getProduct(sci.getProduct().getItemId());\r\n         if (p != null) {\r\n            sci.setProduct(p);\r\n            sci.setPrice(p.getPrice());\r\n         }\r\n      }\r\n\r\n   }\r\n\r\n   public Product getProduct(String itemId) {\r\n      return this.productServices.getProductByItemId(itemId);\r\n   }\r\n}\r\n"}